package cn.com.sdcsoft.devices.utils;

import cn.com.sdcsoft.devices.SdcSoftDevice;
import cn.com.sdcsoft.devices.map.DevicePointMap;
import cn.com.sdcsoft.devices.meta.ByteField;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;

/**
 * Created by jialiang on 2018/4/20.
 */

public class DeviceAdapterUtil {
    private static final String DEVICE_POWER_MEDIA_MAP_PACKAGE_PATH = "cn.com.sdcsoft.devices.map.%sDevicePointMap";
    private static final String STRING_FORMAT_DEVICE_MAP_PACKAGE_PATH = "cn.com.sdcsoft.devices.map.%sDevicePointMap_%s";
    private static final String STRING_FORMAT_DEVICE_PACKAGE_PATH = "cn.com.sdcsoft.devices.Device_%s";
    private static ArrayList<SdcSoftDevice> devices;
    private static HashMap<String, DevicePointMap> maps;

    public static String getMediaString(int key) {
        if (PowerAndMediaMap.coms_media.containsKey(key)) {
            return PowerAndMediaMap.coms_media.get(key);
        }
        return null;
    }

    public static String getPowerString(int key) {
        if (PowerAndMediaMap.coms_power.containsKey(key)) {
            return PowerAndMediaMap.coms_power.get(key);
        }
        return null;
    }


    private static DevicePointMap PowerAndMediaMap = null;
    private static String locale = null;

    static {
        devices = new ArrayList(10);
        maps = new HashMap(5);
    }

    public static void initLocale(String localeName) throws IllegalAccessException, InstantiationException, ClassNotFoundException {
        locale = getLocaleString(localeName);
        Class mapClazz = Class.forName(String.format(Locale.CHINA, DEVICE_POWER_MEDIA_MAP_PACKAGE_PATH, locale));
        PowerAndMediaMap = (DevicePointMap) mapClazz.newInstance();
    }

    private static String getLocaleString(String localeName) {
        return null == localeName ? "zh_cn." : String.format("%s.", localeName.replace('-', '_'));
    }


    /**
     * @Deprecated replace by <code>putDevices(String typeName,String deviceNo,int powerVal,int mediaVal)</code>
     */
    @Deprecated
    public static void putDeviceType(String typeName) throws Exception {
        putDeviceType(typeName, locale);
    }

    /**
     * 预加载设备列表，仅适合设备数量较少的应用使用（手机APP）。
     * 对于展示成百上千的设备而言，不应进行设备预加载操作。
     *
     * @param typeName
     * @param deviceNo
     * @param powerVal
     * @param mediaVal
     * @throws Exception
     */
    public static void putDevices(String typeName, String deviceNo, int powerVal, int mediaVal) throws Exception {
        SdcSoftDevice device = putDevice(typeName, locale);
        device.setDeviceNo(deviceNo);
        device.setPowerVal(powerVal);
        device.setMediaVal(mediaVal);
    }

    private static SdcSoftDevice putDevice(String typeName, String LocaleName) throws Exception {
        Class deviceClazz = Class.forName(String.format(Locale.CHINA, STRING_FORMAT_DEVICE_PACKAGE_PATH, typeName));
        if (!maps.containsKey(typeName)) {
            Class mapClazz = Class.forName(String.format(Locale.CHINA, STRING_FORMAT_DEVICE_MAP_PACKAGE_PATH, LocaleName, typeName));
            DevicePointMap devicePointMap = (DevicePointMap) mapClazz.newInstance();
            maps.put(typeName, devicePointMap);
        }
        SdcSoftDevice device = (SdcSoftDevice) deviceClazz.newInstance();
        device.setDeviceType(typeName);
        devices.add(device);
        return device;
    }

    private static void putDeviceType(String typeName, String LocaleName) throws Exception {
    }

    public static void clearDevicesType() {
        devices.clear();
        maps.clear();
    }

    /**
     * 获得设备列表的所有设备数据信息
     *
     * @param bytes
     * @return
     */
    public static List<SdcSoftDevice> getDevicesByByte(byte[] bytes) throws Exception {
        if (devices.size() < 1) {
            throw new Exception("请先执行DeviceAdapterUtil.putDeviceType方法，放入准备用于解析的设备的类型。");
        }
        int byteStartIndex = 0;
        for (SdcSoftDevice device : devices) {
            initDevice(device, bytes, byteStartIndex);
            byteStartIndex += device.getDeviceBytesLength();
        }
        return devices;
    }

    public static SdcSoftDevice getDeviceByByte(byte[] bytes, String typeName) {
        SdcSoftDevice device = null;
        try {
            Class clazz = Class.forName(String.format(Locale.CHINA, STRING_FORMAT_DEVICE_PACKAGE_PATH, typeName));
            device = (SdcSoftDevice) clazz.newInstance();
            if (device.validateFalse(bytes.length)) {
                return null;
            }
            device.handleDeviceNo(bytes);
            clazz = Class.forName(String.format(Locale.CHINA, STRING_FORMAT_DEVICE_MAP_PACKAGE_PATH, locale, typeName));
            DevicePointMap devicePointMap = (DevicePointMap) clazz.newInstance();

            if (devicePointMap == null)
                return null;
            for (String key : devicePointMap.getPointMap().keySet()) {
                ByteField f = devicePointMap.getPointMap().get(key);
                device.handleByteField(f, bytes);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return device;
    }

    public static void initDevice(SdcSoftDevice device, byte[] bytes, int byteStartIndex) {
        int endIndex = byteStartIndex + device.getDeviceBytesLength();
        /**
         * 校验数据长度有效性
         */
        if (bytes.length < endIndex)
            return;
        /**
         * byte 数组裁剪
         */
        byte[] current = new byte[device.getDeviceBytesLength()];

        for (int i = 0, j = byteStartIndex; j < endIndex; i++, j++) {
            current[i] = bytes[j];
        }

        /**
         * 填充设备信息
         */
        DevicePointMap devicePointMap = maps.get(device.getDeviceType());
        device.handleDeviceNo(current);
        for (String key : devicePointMap.getPointMap().keySet()) {
            ByteField f = devicePointMap.getPointMap().get(key);
            device.handleByteField(f, current);
        }
        if (device.getPowerVal() != SdcSoftDevice.POWER_MEDIA_VALUE_NULL &&
                device.getMediaVal() != SdcSoftDevice.POWER_MEDIA_VALUE_NULL){
            device.set
        }
            return;
        device.getBaseInfoFields().remove(SdcSoftDevice.KEY_POINT_POWER);
        device.getBaseInfoFields().remove(SdcSoftDevice.KEY_POINT_MEDIA);
    }
}
